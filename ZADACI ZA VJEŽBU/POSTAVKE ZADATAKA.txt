--------------- Zadatak 1 ---------------

Napravite rekurzivnu funkciju ‘nthFibonacci' za računanje n - tog Fibonacci broja.

--------------- Zadatak 2 ---------------

Napravite rekurzivnu funkciju 'printLettersInReverse', 
koja treba da ispiše sva velika slova koja se nalaze između dva proslijeđena velika slova (ali u obratnom redoslijedu). 

--------------- Zadatak 3 ---------------

Napišite program koji će omogućiti kreiranje 1D niza proizvoljne veličine, te uz pomoć rekurzivnih funkcija omogućiti:

   -> unos elemenata
   -> ispis elemenata
   -> izračunati sumu svih elemenata niza
   -> sumu pozitivnih elemenata niza
   -> sumu elemenata niza s parnim indeksom

--------------- Zadatak 4 ---------------

Napišite rekurzivnu funkciju 'isPrime', koja provjerava da li je dati broj prost.

--------------- Zadatak 5 ---------------

Napisati program za sabiranje matrica proizvoljnih dimenzija.
Neka su date dvije matrice A i B, koje je potrebno popuniti slučajnim vrijednostima u opsegu [1-5]
Formirati matricu C kao zbir matrica A i B:
	C[i,j] = A[i,j] + B[i,j]

--------------- Zadatak 6 ---------------

Neka je data matrica M proizvoljnih dimenzija koje određuje korisnik. 
Popuniti matricu M slučajnim vrijednostima u opsegu [6-10]
Napisati dvije funkcije:
	-> getAveragesByRow [funkcija koja treba da vrati prosjeke redova]
	-> getAveragesByColumn [funkcija koja treba da vrati prosjeke kolona

--------------- Zadatak 7 ---------------

Napisati program koji omogućuje korisniku da unese dimenzije dviju matrica M1 i M2.
Popuniti matrice M1 i M2 slučajnim vrijednostima u opsegu [1-20]
Napisati funkciju:
	-> hstack [funkcija koja prima kao ulazne parametre dvije matrice M1 i M2 a vraća novu matricu M3
	koja se formira horizontalnim slaganjem matrica M1 i M2

		Primjer:

		Neka je M1:
		1 2 3
		4 5 6
		7 8 9

		Neka je M2:
		4 10
		7 8
		1 1
		
		Rezultujuća matrica M3 treba igledati ovako:
		1 2 3 4 10
		4 5 6 7 8
		7 8 9 1 1

--------------- Zadatak 8 ---------------

Napisati program koji omogućuje korisniku da unese dimenzije dviju matrica M1 i M2.
Popuniti matrice M1 i M2 slučajnim vrijednostima u opsegu [1-20]
Napisati funkciju:
	-> vstack [funkcija koja prima kao ulazne parametre dvije matrice M1 i M2 a vraća novu matricu M3
	koja se formira vertikalnim slaganjem matrica M1 i M2

		Primjer:

		Neka je M1:
		1 2 3
		4 5 6
		7 8 9

		Neka je M2:
		4 10 5
		1 1  2
		
		Rezultujuća matrica M3 treba igledati ovako:
		1 2  3
		4 5  6
		7 8  9
		4 10 5
		1 1  2


--------------- Zadatak 9 ---------------

Kreirati strukturu Datum sa tri obilježja (dan, mjesec i godina) a zatim implementirati program
gdje je potrebno unijeti niz datuma proizvoljne veličine (veličine koju određuje korisnik), 
nakon čega će program ispisati najstariji datum od unesenih.

Koristiti sljedeći prototip funkcije za pronalaženje najstarijeg datuma:
Datum* getOldestDate(Datum* d, int size);
Napomene: Uneseni datumi moraju biti validni datumi [u suprotnom ponavljati unos]
Za provjeru validnosti datuma koristite funkciju članicu 'isValid'

Obavezno uraditi dealokaciju nizu datuma na kraju programa.

--------------- Zadatak 10 ---------------

Kreirati strukturu Datum sa tri obilježja (dan, mjesec i godina) a zatim implementirati program
gdje je potrebno generisati niz slučajnih (random) datuma proizvoljne veličine (veličine koju određuje korisnik), nakon čega će program ispisati najnoviji datum od unesenih.

Koristiti sljedeći prototip funkcije za pronalaženje najstarijeg datuma:
Datum* getNewestDate(Datum* d, int size);
   
Napomene: Generisani slučajni datumi moraju biti validni datumi [u suprotnom ponavljati generisanje]
Za provjeru validnosti datuma koristite funkciju članicu 'isValid'

Obavezno uraditi dealokaciju nizu datuma na kraju programa.
